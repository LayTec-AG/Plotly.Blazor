@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.LayoutLib.XAxisLib
@using System.Globalization
<PlotlyChart style="height: 60vh; min-height: 350px" @bind-Config="config" @bind-Layout="layout" @bind-Data="data" @ref="chart"/>

@code
{
    [CascadingParameter]
    private MudTheme Theme { get; set; }

    private PlotlyChart chart;
    private Config config;
    private Layout layout;
    private IList<ITrace> data;

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        config = new Config
        {
            ShowLink = false,
            Responsive = true,
            DisplayLogo = false
        };

        layout = new Layout
        {
            Title = new Title
            {
                Text = GetType().Name
            },
            PaperBgColor = Theme.PaletteDark.Surface.ToString(),
            PlotBgColor = Theme.PaletteDark.Surface.ToString(),
            Font = new Font
            {
                Color = Theme.PaletteDark.TextPrimary.ToString()
            },
            Annotations = new List<Annotation>(),
            XAxis = new List<XAxis>
            {
                new()
                {
                    Ticks = TicksEnum.Empty,
                    Side = SideEnum.Top
                }
            },
            YAxis = new List<YAxis>
            {
                new()
                {
                    Ticks = LayoutLib.YAxisLib.TicksEnum.Empty,
                    TickSuffix = " "
                }
            }
        };

        data = GetMapData().ToList();

        AddAnnotations(layout, data.First());

        base.OnInitialized();
    }

    private IList<ITrace> GetMapData()
    {
        IList<ITrace> mapData = new List<ITrace>();

        var xValues = new[] { 'A', 'B', 'C', 'D', 'E' };

        var yValues = new[] { 'W', 'X', 'Y', 'Z' };

        var zValues = new[]
        {
            new double?[] { 0.00, 0.00, 0.75, 0.75, 0.00 },
            new double?[] { 0.00, 0.00, 0.75, 0.75, 0.00 },
            new double?[] { 0.75, 0.75, 0.75, 0.75, 0.75 },
            new double?[] { null, 0.00, 0.00, 0.75, 0.00 }
        };

        mapData.Add(new HeatMap
        {
            X = xValues.Cast<object>().ToList(),
            Y = yValues.Cast<object>().ToList(),
            Z = zValues.Cast<object>().ToList(),
            ColorScale = new[]
            {
                new[] { "0", "#3D9970" },
                new[] { "1", "#001f3f" }
            },
            ShowScale = false
        });

        return mapData;
    }

    private static void AddAnnotations(Layout layout, ITrace trace)
    {
        if (trace is not HeatMap { Z: List<object> zValues } heatMap) return;

        for (var i = 0; i < heatMap.Y.Count; i++)
        {
            for (var j = 0; j < heatMap.X.Count; j++)
            {
                var currentValue = ((double?[])zValues[i])[j];
                var textColor = currentValue != 0.0 ? "white" : "black";

                var result = new Annotation
                {
                    XRef = "x1",
                    YRef = "y1",
                    X = heatMap.X[j],
                    Y = heatMap.Y[i],
                    Text = currentValue.HasValue ? currentValue.Value.ToString(CultureInfo.InvariantCulture) : string.Empty,
                    Font = new LayoutLib.AnnotationLib.Font
                    {
                        Family = "Arial",
                        Size = 12,
                        Color = textColor
                    },
                    ShowArrow = false
                };
                layout.Annotations.Add(result);
            }
        }
    }
}