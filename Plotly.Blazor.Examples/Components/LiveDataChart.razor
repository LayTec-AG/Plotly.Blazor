@using System.Collections.Concurrent
@using System.Diagnostics
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.Traces.ScatterLib
@implements IDisposable

<PlotlyChart style="height: 60vh; min-height: 350px" @bind-Config="config" @bind-Layout="layout" @bind-Data="data" @ref="chart"/>

@code
{
    [CascadingParameter]
    private MudTheme Theme { get; set; }

    private PlotlyChart chart;
    private Config config;
    private Layout layout;
    private IList<ITrace> data;

    private CancellationTokenSource cancellationToken;
    private BlockingCollection<DataJob> queue;
    private event EventHandler<DataJob> DataEvent;

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        config = new Config
        {
            Responsive = true
        };

        layout = new Layout
        {
            Title = new Title
            {
                Text = GetType().Name
            },
            PaperBgColor = Theme.PaletteDark.Surface.ToString(),
            PlotBgColor = Theme.PaletteDark.Surface.ToString(),
            Font = new Font
            {
                Color = Theme.PaletteDark.TextPrimary.ToString()
            },
            XAxis = new[]
            {
                new XAxis
                {
                    Title = new LayoutLib.XAxisLib.Title
                    {
                        Text = "Index"
                    }
                }
            },
            YAxis = new[]
            {
                new YAxis
                {
                    Title = new LayoutLib.YAxisLib.Title
                    {
                        Text = "Value"
                    }
                }
            }
        };

        data = new List<ITrace>
        {
            new Scatter
            {
                Name = "Trace 1",
                Mode = ModeFlag.Lines,
                X = new List<object>(),
                Y = new List<object>(),
                XAxis = "x",
                YAxis = "y"
            },
            new Scatter
            {
                Name = "Trace 2",
                Mode = ModeFlag.Lines,
                X = new List<object>(),
                Y = new List<object>(),
                XAxis = "x",
                YAxis = "y"
            }
        };

        cancellationToken = new CancellationTokenSource();
        queue = new BlockingCollection<DataJob>();

        base.OnInitialized();
    }

    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            DataEvent += UpdateData;
            _ = WriteData(50, 30);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    /// <inheritdoc />
    public void Dispose()
    {
        DataEvent -= UpdateData;
        cancellationToken?.Cancel();
    }

    /// <summary>
    ///     Writes data to the queue.
    /// </summary>
    /// <param name="milliseconds"></param>
    /// ///
    /// <param name="count"></param>
    private Task WriteData(int milliseconds, int count)
    {
        return Task.Run(async () =>
        {
    // Repeat until cancellation is requested
            while (!cancellationToken.IsCancellationRequested)
            {
                var (x, y) = Helper.GenerateData(0, count);
                var (x2, y2) = Helper.GenerateData(0, count, GenerateMethod.Cos);

                DataEvent?.Invoke(this, new DataJob(new DataEventArgs(x, y, 0), chart, data));
                DataEvent?.Invoke(this, new DataJob(new DataEventArgs(x2, y2, 1), chart, data));

                await Task.Delay(TimeSpan.FromMilliseconds(milliseconds));
            }
        });
    }


    /// <summary>
    ///     Updates the chart by using the given data job.
    /// </summary>
    /// <param name="job">DataJob</param>
    private async void UpdateData(object sender, DataJob job)
    {
        if ((!job?.DataEventArgs?.X?.Any() ?? true) || (!job?.DataEventArgs?.Y?.Any() ?? true) || job.Chart == null || job.Traces == null || job.DataEventArgs.TraceIndex < 0)
        {
            return;
        }

        var stopwatch = new Stopwatch();
        stopwatch.Restart();

        var count = job.DataEventArgs.X.Count();

        try
        {
            await InvokeAsync(async () => await job.Chart.ExtendTrace(job.DataEventArgs.X, job.DataEventArgs.Y, job.DataEventArgs.TraceIndex, count, cancellationToken.Token));
        }
        catch (Exception ex)
        {
            stopwatch.Stop();
            Console.WriteLine($"Render of {count} points failed after {stopwatch.ElapsedMilliseconds}ms");
            Console.WriteLine(ex);
            return;
        }

        stopwatch.Stop();
        Console.WriteLine($"Render of {count} points took {stopwatch.ElapsedMilliseconds}ms");
    }


    /// <summary>
    ///     Event Arguments for the Live Data Simulation.
    /// </summary>
    internal class DataEventArgs : EventArgs
    {
        public DataEventArgs(IEnumerable<object> x, IEnumerable<object> y, int traceIndex)
        {
            X = x;
            Y = y;
            TraceIndex = traceIndex;
        }

        public IEnumerable<object> X { get; set; }
        public IEnumerable<object> Y { get; set; }
        public int TraceIndex { get; set; }
    }

    /// <summary>
    ///     Defines a job, that will be enqueued with the passed data.
    /// </summary>
    internal class DataJob
    {
        public DataJob(DataEventArgs dataEventArgs, PlotlyChart chart, IList<ITrace> traces)
        {
            DataEventArgs = dataEventArgs;
            Chart = chart;
            Traces = traces;
        }

        public DataEventArgs DataEventArgs { get; set; }

        public PlotlyChart Chart { get; set; }

        public IList<ITrace> Traces { get; set; }
    }

}