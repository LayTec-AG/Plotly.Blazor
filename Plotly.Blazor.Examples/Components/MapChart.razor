@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.LayoutLib.GeoLib
@using Plotly.Blazor.LayoutLib.GeoLib.ProjectionLib
@using Plotly.Blazor.Traces.ScatterGeoLib
@using System.Globalization
@using Plotly.Blazor.Interop
@inject NavigationManager MyNavigationManager

@if (!IsInitialized)
{
    <MudPaper>
        <MudProgressLinear Color="Color.Primary" Indeterminate="true"/>
    </MudPaper>
}

<PlotlyChart style="height: 60vh; min-height: 350px" @bind-Config="config" @bind-Layout="layout" @bind-Data="data" @ref="chart" HoverAction="HoverAction" AfterRender="LoadData" />

@if (HoverInfos != null && HoverInfos.Any())
{
    <MudText>Current Lat: @HoverInfos.First().Lat</MudText>
    <MudText>Current Lon: @HoverInfos.First().Lon</MudText>
}

@code
{
    [CascadingParameter]
    private MudTheme Theme { get; set; }

    private PlotlyChart chart;
    private Config config;
    private Layout layout;
    private IList<ITrace> data;
    private IEnumerable<EventDataPoint> HoverInfos { get; set; }

    private bool IsInitialized { get; set; }

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        config = new Config
        {
            Responsive = true,
            ShowLink = false
        };

        layout = new Layout
        {
            Title = new Title
            {
                Text = "Feb. 2011 American Airline flight paths"
            },
            PaperBgColor = Theme.PaletteDark.Surface.ToString(),
            PlotBgColor = Theme.PaletteDark.Surface.ToString(),
            Font = new Font
            {
                Color = Theme.PaletteDark.TextPrimary.ToString()
            },
            ShowLegend = false,
            Geo = new List<Geo>
            {
                new()
                {
                    Scope = ScopeEnum.NorthAmerica,
                    Projection = new Projection
                    {
                        Type = TypeEnum.AzimuthalEqualArea
                    },
                    ShowLand = true,
                    BgColor = "rgb(48, 48, 48)"
                }
            }
        };

        data = new List<ITrace>();

        await base.OnInitializedAsync();
    }

    private async Task<IList<ITrace>> GetMapData()
    {
        var client = new HttpClient
        {
            BaseAddress = new Uri(MyNavigationManager.BaseUri)
        };

        var csv = (await client.GetStringAsync($"{MyNavigationManager.BaseUri}2011_february_aa_flight_paths.csv"))
            .Split("\n")
            .Skip(1)
            .Where(s => !string.IsNullOrWhiteSpace(s))
            .Select(s => s.Split(",").ToList()).ToList();

        var startLat = new List<decimal>();
        var startLon = new List<decimal>();
        var endLat = new List<decimal>();
        var endLon = new List<decimal>();
        var count = new List<int>();

        foreach (var row in csv)
        {
            startLat.Add(decimal.Parse(row[0], NumberStyles.Any, CultureInfo.InvariantCulture));
            startLon.Add(decimal.Parse(row[1], NumberStyles.Any, CultureInfo.InvariantCulture));
            endLat.Add(decimal.Parse(row[2], NumberStyles.Any, CultureInfo.InvariantCulture));
            endLon.Add(decimal.Parse(row[3], NumberStyles.Any, CultureInfo.InvariantCulture));
            count.Add(int.Parse(row[7], NumberStyles.Any, CultureInfo.InvariantCulture));
        }

        var max = (float)count.Max();

        return count.Select((t, i) => new ScatterGeo
        {
            LocationMode = LocationModeEnum.USAStates, Lon = new List<object> { startLon[i], endLon[i] }, Lat = new List<object> { startLat[i], endLat[i] }, Mode = ModeFlag.Lines, Line = new Line
            {
                Width = 1, Color = "red"
            },
            Opacity = new decimal(t / max)
        }).Cast<ITrace>().ToList();
    }

    public void HoverAction(IEnumerable<EventDataPoint> eventData)
    {
        HoverInfos = eventData;
        StateHasChanged();
    }

    private void LoadData()
    {
        Task.Run(async () =>
        {
            foreach (var trace in await GetMapData())
            {
                await InvokeAsync(async () => await chart.AddTrace(trace));
                // Add the delay to keep the UI responsive
                await Task.Delay(10);
            }
            IsInitialized = true;
            await chart.SubscribeHoverEvent();
            await InvokeAsync(StateHasChanged);
        });
    }
}