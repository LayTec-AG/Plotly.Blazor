@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.LayoutLib.YAxisLib
@using Plotly.Blazor.Traces.ScatterLib
@using System.Diagnostics

<PlotlyChart style="height: 60vh; min-height: 350px" @bind-Config="config" @bind-Layout="layout" @bind-Data="data" @ref="chart" AfterRender="AddData"/>
<br/>
<div class="d-flex gap-1 justify-end">
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Clear">Clear</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddData">Add data</MudButton>
</div>

@code
{
    [CascadingParameter]
    private MudTheme Theme { get; set; }

    private PlotlyChart chart;
    private Config config;
    private Layout layout;
    private IList<ITrace> data;

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        config = new Config
        {
            Responsive = true
        };

        layout = new Layout
        {
            Title = new Title
            {
                Text = GetType().Name
            },
            PaperBgColor = Theme.PaletteDark.Surface.ToString(),
            PlotBgColor = Theme.PaletteDark.Surface.ToString(),
            Font = new Font
            {
                Color = Theme.PaletteDark.TextPrimary.ToString()
            },
            YAxis = new List<YAxis>
            {
                new()
                {
                    Title = new LayoutLib.YAxisLib.Title
                    {
                        Text = "Scatter Unit"
                    }
                },
                new()
                {
                    Title = new LayoutLib.YAxisLib.Title
                    {
                        Text = "Bar Unit"
                    },
                    Overlaying = "y",
                    Side = SideEnum.Right
                }
            }
        };

        data = new List<ITrace>
        {
            new Scatter
            {
                Name = "ScatterTrace",
                Mode = ModeFlag.Lines | ModeFlag.Markers,
                X = new List<object>(),
                Y = new List<object>()
            },
            new Bar
            {
                Name = "BarTrace",
                YAxis = "y2",
                X = new List<object>(),
                Y = new List<object>(),
                Opacity = new decimal(0.7)
            }
        };

        base.OnInitialized();
    }

    private async void AddData()
    {
        const int count = 100;

        if (chart.Data.ElementAt(0) is not Scatter scatter) return;
        if (chart.Data.ElementAt(1) is not Bar bar) return;

        var (x, y) = Helper.GenerateData(scatter.X.Count + 1, scatter.X.Count + 1 + count);
        var (x2, y2) = Helper.GenerateData(bar.X.Count + 1, bar.X.Count + 1 + count, GenerateMethod.Cos);

        var stopwatch = new Stopwatch();
        stopwatch.Start();

    // Pattern: x[], y[], indices[]
        await chart.ExtendTraces(new[] { x, x2 }, new[] { y, y2 }, new[] { 0, 1 });

        stopwatch.Stop();
        Console.WriteLine($"[PERF.] Update took {stopwatch.ElapsedMilliseconds}");
    }

    private async Task Clear()
    {
        if (chart.Data.ElementAt(0) is not Scatter plot) return;
        if (chart.Data.ElementAt(1) is not Bar plot2) return;

        plot.X.Clear();
        plot.Y.Clear();

        plot2.X.Clear();
        plot2.Y.Clear();

        await chart.React();
    }
}