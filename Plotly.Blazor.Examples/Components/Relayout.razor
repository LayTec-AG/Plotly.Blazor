@using Plotly.Blazor.Interop
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.Traces.ScatterLib
<PlotlyChart style="height: 60vh; min-height: 350px"
             @bind-Config="config" @bind-Layout="layout" @bind-Data="data" @ref="chart"
             RelayoutAction="RelayoutAction" AfterRender="Init"/>

@if (relayoutData?.XRange?.Count() == 2)
{
    <MudText>X: @relayoutData.XRange[0], @relayoutData.XRange[1]</MudText>
}

@if (relayoutData?.YRange?.Count() == 2)
{
    <MudText>Y: @relayoutData.YRange[0], @relayoutData.YRange[1]</MudText>
}

@code
{
    [CascadingParameter]
    private MudTheme Theme { get; set; }

    private PlotlyChart chart;
    private Config config;
    private Layout layout;
    private IList<ITrace> data;
    private RelayoutEventData relayoutData;

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        config = new Config
        {
            Responsive = true
        };

        layout = new Layout
        {
            Title = new Title
            {
                Text = "Scatter with Relayout Event"
            },
            PaperBgColor = Theme.PaletteDark.Surface.ToString(),
            PlotBgColor = Theme.PaletteDark.Surface.ToString(),
            Font = new Font
            {
                Color = Theme.PaletteDark.TextPrimary.ToString()
            },
            YAxis = new List<YAxis>
            {
                new()
                {
                    Title = new LayoutLib.YAxisLib.Title { Text = "Scatter Unit" }
                }
            }
        };

        data = new List<ITrace>
        {
            new Scatter
            {
                Name = "ScatterTrace",
                Mode = ModeFlag.Lines | ModeFlag.Markers,
                X = new List<object>(),
                Y = new List<object>()
            }
        };

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ExtendData();
        }
    }

    private async void Init()
    {
        await ExtendData();
        await chart.SubscribeRelayoutEvent();
    }

    private async Task ExtendData(int count = 100)
    {
        if (chart.Data.FirstOrDefault() is not Scatter scatter) return;

        var max = (int?)scatter.X?.Max();
        var (_, y) = Helper.GenerateData(max + 1 ?? 0, max + 1 + count ?? count);

        var xDate = new DateTime(2015, 2, 12);
        var x = new List<object>();

        for (int i = 0; i < count; i++)
        {
            x.Add(xDate);
            xDate = xDate.AddHours(1);
        }

        if (!scatter.X.Any() || !scatter.Y.Any())
        {
            scatter.X.AddRange(x);
            scatter.Y.AddRange(y);
            await chart.React();
        }
        else
        {
            await chart.ExtendTrace(x, y, data.IndexOf(scatter));
        }
    }

    public void RelayoutAction(RelayoutEventData data)
    {
        relayoutData = data;
        StateHasChanged();
    }
}