@using Plotly.Blazor.Interop
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.Traces.ScatterLib
<PlotlyChart style="height: 60vh; min-height: 350px"
@bind-Config="config" @bind-Layout="layout" @bind-Data="data" @ref="chart"
             RelayoutAction="RelayoutAction" AfterRender="Init" />

@if (relayoutData?.XRange?.Count() == 2)
{
    <MudText>X: @relayoutData.XRange[0], @relayoutData.XRange[1]</MudText>
}

@if (relayoutData?.YRange?.Count() == 2)
{
    <MudText>Y: @relayoutData.YRange[0], @relayoutData.YRange[1]</MudText>
}

@code
{
    [CascadingParameter]
    private MudTheme Theme { get; set; }

    private PlotlyChart chart;
    private Config config;
    private Layout layout;
    private IList<ITrace> data;
    private RelayoutEventData relayoutData;

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        var startDate = DateTime.Now;

        config = new Config
        {
            Responsive = true
        };

        layout = new Layout
        {
            Title = new Title
            {
                Text = "Scatter with Relayout Event"
            },
            PaperBgColor = Theme.PaletteDark.Surface.ToString(),
            PlotBgColor = Theme.PaletteDark.Surface.ToString(),
            Font = new Font
            {
                Color = Theme.PaletteDark.TextPrimary.ToString()
            },
            YAxis = new List<YAxis>
            {
                new()
                {
                    Title = new LayoutLib.YAxisLib.Title { Text = "Scatter Unit" }
                }
            }
        };

        data = new List<ITrace>
        {
            new Scatter
            {
                Name = "ScatterTrace",
                Mode = ModeFlag.Lines | ModeFlag.Markers,
                X = Enumerable.Range(0, 100).Select(i =>  startDate + TimeSpan.FromHours(i)).Cast<object>().ToList(),
                Y = Helper.GenerateData(0, 100).Y
            }
        };

        base.OnInitialized();
    }

    private async void Init()
    {
        await chart.SubscribeRelayoutEvent();
    }

    public void RelayoutAction(RelayoutEventData data)
    {
        relayoutData = data;
        StateHasChanged();
    }
}