@using Plotly.Blazor.Interop
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.LayoutLib.YAxisLib
@using Plotly.Blazor.Traces.ScatterLib
@using TypeEnum = Plotly.Blazor.LayoutLib.ShapeLib.TypeEnum
@using System.Text.Json
<PlotlyChart style="height: 60vh; min-height: 350px"
             @bind-Config="config" @bind-Layout="layout" @bind-Data="data" @ref="chart"
             RelayoutAction="RelayoutAction" RestyleAction="RestyleAction" AfterRender="Init" />

<br />
<MudText Typo="Typo.h4">Latest updated relayout properties: </MudText>

@if (relayoutData?.RawData != null)
{
    @foreach (var item in relayoutData.RawData)
    {
        <MudText>(Key: @(item.Key), Value: @(item.Value.ToString()))</MudText>
    }
}

<br />
<MudText Typo="Typo.h4">Latest updated restyle properties: </MudText>

@if (restyleData?.Changes != null)
{
    <MudText>Updated Traces: [@(string.Join(", ", restyleData.Indices))]</MudText>
    @foreach (var item in restyleData.Changes)
    {
        <MudText>(Key: @(item.Key), Value: @(item.Value.ToString()))</MudText>
    }
}

@code
{
    [CascadingParameter]
    private MudTheme Theme { get; set; }

    private PlotlyChart chart;
    private Config config;
    private Layout layout;
    private IList<ITrace> data;
    private RelayoutEventData relayoutData;
    private RestyleEventData restyleData;

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        var startDate = DateTime.Now;

        config = new Config
            {
                Responsive = true,
                Editable = true
            };

        layout = new Layout
            {
                Title = new Title
                {
                    Text = "Scatter with Relayout Event"
                },
                PaperBgColor = Theme.PaletteDark.Surface.ToString(),
                PlotBgColor = Theme.PaletteDark.Surface.ToString(),
                Font = new Font
                {
                    Color = Theme.PaletteDark.TextPrimary.ToString()
                },
                Shapes = new List<Shape>()
            {
                new()
                {
                    Type = TypeEnum.Rect,
                    X0 = 20,
                    X1 = 40,
                    Y0 = 0,
                    Y1 = 1,
                    XRef = "x",
                    YRef = "paper",
                    Line = new()
                    {
                        Width = 0
                    },
                    FillColor = "rgba(84,166,143,1)",
                    Opacity = 0.3m
                },
                new()
                {
                    Type = TypeEnum.Rect,
                    X0 = 60,
                    X1 = 80,
                    Y0 = 0,
                    Y1 = 1,
                    XRef = "x",
                    YRef = "paper",
                    Line = new()
                    {
                        Width = 0
                    },
                    FillColor = "rgba(84,166,143,1)",
                    Opacity = 0.3m
                }
            }
            };

        data = new List<ITrace>
        {
            new Scatter
            {
                Name = "Sin",
                Mode = ModeFlag.Lines | ModeFlag.Markers,
                X = Enumerable.Range(0, 100).Cast<object>().ToList(),
                Y = Helper.GenerateData(0, 100).Y
            },
            new Scatter
            {
                Name = "Cos",
                Mode = ModeFlag.Lines | ModeFlag.Markers,
                X = Enumerable.Range(0, 100).Cast<object>().ToList(),
                Y = Helper.GenerateData(0, 100, GenerateMethod.Cos).Y,
            }
        };

        base.OnInitialized();
    }

    private async void Init()
    {
        await chart.SubscribeRelayoutEvent();
        await chart.SubscribeRestyleEvent();
    }

    public void RelayoutAction(RelayoutEventData eventData)
    {
        relayoutData = eventData;
        StateHasChanged();
    }

    public void RestyleAction(RestyleEventData eventData)
    {
        restyleData = eventData;
        StateHasChanged();
    }
}