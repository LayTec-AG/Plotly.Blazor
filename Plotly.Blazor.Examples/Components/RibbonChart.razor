@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.LayoutLib.SceneLib
@using XAxis = Plotly.Blazor.LayoutLib.SceneLib.XAxis
@using YAxis = Plotly.Blazor.LayoutLib.SceneLib.YAxis
@using Newtonsoft.Json.Linq
@inject NavigationManager MyNavigationManager

@if (!IsInitialized)
{
    <MudPaper>
        <MudProgressLinear Color="Color.Primary" Indeterminate="true"/>
    </MudPaper>
}

<PlotlyChart style="height: 60vh; min-height: 350px" @bind-Config="config" @bind-Layout="layout" @bind-Data="data" @ref="chart" AfterRender="LoadData"/>

@code
{
    [CascadingParameter]
    private MudTheme Theme { get; set; }

    private PlotlyChart chart;
    private Config config;
    private Layout layout;
    private IList<ITrace> data;

    private bool IsInitialized { get; set; }
    const string Url = "https://raw.githubusercontent.com/plotly/datasets/master/3d-ribbon.json";


    /// <inheritdoc />
    protected override void OnInitialized()
    {
        config = new Config
        {
            ShowLink = false,
            Responsive = true,
            DisplayLogo = false
        };

        layout = new Layout
        {
            Title = new Title
            {
                Text = GetType().Name
            },
            PaperBgColor = Theme.PaletteDark.Surface.ToString(),
            PlotBgColor = Theme.PaletteDark.Surface.ToString(),
            Font = new Font
            {
                Color = Theme.PaletteDark.TextPrimary.ToString()
            },
            ShowLegend = false,
            Scene = new[]
            {
                new Scene
                {
                    XAxis = new XAxis { Title = new LayoutLib.SceneLib.XAxisLib.Title { Text = "Sample #" } },
                    YAxis = new YAxis { Title = new LayoutLib.SceneLib.YAxisLib.Title { Text = "Wave length" } },
                    ZAxis = new ZAxis { Title = new LayoutLib.SceneLib.ZAxisLib.Title { Text = "OD" } }
                }
            }
        };

        data = new List<ITrace>();
        base.OnInitialized();
    }

    private void LoadData()
    {
        Task.Run(async () =>
        {
            using var client = new HttpClient
            {
                BaseAddress = new Uri(MyNavigationManager.BaseUri)
            };

            var jsonResponse = await client.GetStringAsync(Url);
            var jsonObject = JObject.Parse(jsonResponse);
            var results = jsonObject["data"]?.Children().ToList();

            if (!results?.Any() ?? true) return;

            foreach (var ribbon in results.Select(obj => obj.ToObject<Ribbon>()))
            {
                await InvokeAsync(async () => await chart.AddTrace(new Surface
                {
                    X = ribbon.X,
                    Y = ribbon.Y,
                    Z = ribbon.Z,
                    ShowLegend = false,
                    ShowScale = false
                }));

                // Add the delay to keep the UI responsive
                await Task.Delay(10);
            }
            IsInitialized = true;
            await InvokeAsync(StateHasChanged);
        });
    }

    record Ribbon(object[][] X, object[][] Y, object[][] Z, string[][] ColorScale);
}