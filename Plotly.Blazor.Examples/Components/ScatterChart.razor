@using Blazor_Layout = Layout
@using Examples_Helper = Helper
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.Traces.ScatterLib

<PlotlyChart style="height: 60vh; min-height: 350px" @bind-Config="config" @bind-Layout="layout" @bind-Data="data" @ref="chart" AfterRender="ExtendData"/>
<br/>
<div class="d-flex gap-1 justify-end">
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => chart.Clear()">Clear</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="DeleteScatter">Pop</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddScatter">Push</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Restyle">Rename</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="PrependData">Prepend</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ExtendData">Extend</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="PrependWithLimit">Prepend (Max. 100)</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ExtendWithLimit">Extend (Max. 100)</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ExportImage">Show Image</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="DownloadImage">Download</MudButton>
</div>

@if (imgSource != null)
{
    <div style="margin-top:auto; margin-bottom:auto;text-align:center;">
        <br/>
        <h2>Export as an image</h2>
        <img alt="image" src="@imgSource"/>
    </div>
}

@code
{
    [CascadingParameter]
    private MudTheme Theme { get; set; }

    private PlotlyChart chart;
    private Config config;
    private Layout layout;
    private IList<ITrace> data;
    private string imgSource;

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        config = new Config
        {
            Responsive = true
        };

        layout = new Layout
        {
            Title = new Title
            {
                Text = GetType().Name
            },
            PaperBgColor = Theme.PaletteDark.Surface.ToString(),
            PlotBgColor = Theme.PaletteDark.Surface.ToString(),
            Font = new Font
            {
                Color = Theme.PaletteDark.TextPrimary.ToString()
            },
            YAxis = new List<YAxis>
            {
                new()
                {
                    Title = new LayoutLib.YAxisLib.Title { Text = "Scatter Unit" }
                }
            }
        };

        data = new List<ITrace>
        {
            new Scatter
            {
                Name = "ScatterTrace",
                Mode = ModeFlag.Lines | ModeFlag.Markers,
                X = new List<object>(),
                Y = new List<object>()
            }
        };

        base.OnInitialized();
    }

    private async Task AddScatter()
    {
        var (x, y) = Helper.GenerateData(0, 100);
        await chart.AddTrace(new Scatter
        {
            Name = $"ScatterTrace{data.Count + 1}",
            Mode = ModeFlag.Lines | ModeFlag.Markers,
            X = x,
            Y = y
        });
    }

    private async Task DeleteScatter()
    {
        await chart.DeleteTrace(0);
    }

    private async Task ExportImage()
    {
        imgSource = await chart.ToImage(ImageFormat.Png, 400, 800);
    }

    private async Task DownloadImage()
    {
        await chart.DownloadImage(ImageFormat.Png, 400, 800, "ScatterExample");
    }

    private async void ExtendData()
    {
        const int count = 100;

        if (chart.Data.FirstOrDefault() is not Scatter scatter)
        {
            return;
        }

        var max = (int?)scatter.X?.Max();
        var (x, y) = Helper.GenerateData(max + 1 ?? 0, max + 1 + count ?? count);
        if (!scatter.X.Any() || !scatter.Y.Any())
        {
            scatter.X.AddRange(x);
            scatter.Y.AddRange(y);
            await chart.React();
        }
        else
        {
            await chart.ExtendTrace(x, y, data.IndexOf(scatter));
        }
    }

    private async Task ExtendWithLimit()
    {
        const int count = 100;
        const int limit = 100;

        if (chart.Data.FirstOrDefault() is not Scatter scatter)
        {
            return;
        }

        var max = (int?)scatter.X?.Max();
        var (x, y) = Helper.GenerateData(max + 1 ?? 0, max + 1 + count ?? count);
        if (!scatter.X.Any() || !scatter.Y.Any())
        {
            scatter.X.AddRange(x);
            scatter.Y.AddRange(y);
            await chart.React();
        }
        else
        {
            await chart.ExtendTrace(x, y, data.IndexOf(scatter), limit);
        }
    }

    private async Task PrependData()
    {
        const int count = 100;

        if (chart.Data.FirstOrDefault() is not Scatter scatter)
        {
            return;
        }

        var min = (int?)scatter.X?.Min();
        var (x, y) = Helper.GenerateData(min - 1 ?? 0, min - 1 - count ?? count * -1);
        if (!scatter.X.Any() || !scatter.Y.Any())
        {
            scatter.X.AddRange(x);
            scatter.Y.AddRange(y);
            await chart.React();
        }
        else
        {
            await chart.PrependTrace(x, y, data.IndexOf(scatter));
        }
    }

    private async void PrependWithLimit()
    {
        const int count = 100;
        const int limit = 100;

        if (chart.Data.FirstOrDefault() is not Scatter scatter)
        {
            return;
        }

        var min = (int?)scatter.X?.Min();
        var (x, y) = Helper.GenerateData(min - 1 ?? 0, min - 1 - count ?? count * -1);
        if (!scatter.X.Any() || !scatter.Y.Any())
        {
            scatter.X.AddRange(x);
            scatter.Y.AddRange(y);
            await chart.React();
        }
        else
        {
            await chart.PrependTrace(x, y, data.IndexOf(scatter), limit);
        }
    }

    private async Task Restyle()
    {
        var updateScatterChart = new Scatter { Name = "Restyled Name" };
        await chart.Restyle(updateScatterChart, 0);
    }
}