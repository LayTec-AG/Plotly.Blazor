@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.LayoutLib.ShapeLib
@using Plotly.Blazor.Traces.ScatterLib
@using Line = Plotly.Blazor.LayoutLib.ShapeLib.Line

<PlotlyChart style="height: 60vh; min-height: 350px" @bind-Config="config" @bind-Layout="layout" @bind-Data="data" @ref="chart"/>
<br/>
<div class="d-flex gap-1 justify-end">
    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Remove" OnClick="RemoveLine">Remove Line</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="AddLine">Add Line</MudButton>
</div>

@code
{
    [CascadingParameter]
    private MudTheme Theme { get; set; }

    private PlotlyChart chart;
    private Config config;
    private Layout layout;
    private IList<ITrace> data;

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        config = new Config
        {
            Responsive = true
        };

        layout = new Layout
        {
            Title = new Title
            {
                Text = GetType().Name
            },
            PaperBgColor = Theme.PaletteDark.Surface.ToString(),
            PlotBgColor = Theme.PaletteDark.Surface.ToString(),
            Font = new Font
            {
                Color = Theme.PaletteDark.TextPrimary.ToString()
            },
            Shapes = new List<Shape>
            {
                new()
                {
                    Type = TypeEnum.Rect,
                    XRef = "x",
                    YRef = "y",
                    X0 = 20,
                    Y0 = 0,
                    X1 = 40,
                    Y1 = 100,
                    FillColor = "#d3d3d3",
                    Opacity = new decimal(0.3),
                    Line = new Line
                    {
                        Width = 0
                    }
                },
                new()
                {
                    Type = TypeEnum.Rect,
                    XRef = "x",
                    YRef = "y",
                    X0 = 70,
                    Y0 = 0,
                    X1 = 90,
                    Y1 = 100,
                    FillColor = "#d3d3d3",
                    Opacity = new decimal(0.3),
                    Line = new Line
                    {
                        Width = 0
                    }
                }
            }
        };

        data = new List<ITrace>
        {
            new Scatter
            {
                Name = "ScatterTrace",
                Mode = ModeFlag.Lines | ModeFlag.Markers,
                X = Enumerable.Range(0, 100).Cast<object>().ToList(),
                Y = Enumerable.Range(0, 100).Cast<object>().ToList()
            },
            new Scatter
            {
                Name = "TextTrace",
                X = new List<object> { 30, 80 },
                Y = new List<object> { 50, 50 },
                TextArray = new List<string> { "Test1", "Test2" },
                Mode = ModeFlag.Text
            }
        };

        base.OnInitialized();
    }

    private void RemoveLine()
    {
        if (layout.Shapes.Count < 3) return;
        layout.Shapes.RemoveAt(layout.Shapes.Count - 1);
        _ = chart.Relayout(CancellationToken.None);
    }

    private void AddLine()
    {
        var x = layout.Shapes.Count - 1;

        layout.Shapes.Add(new Shape
        {
            Type = TypeEnum.Line,
            XRef = "x",
            YRef = "paper",
            X0 = x,
            X1 = x,
            Y0 = 0,
            Y1 = 1,
            Line = new Line
            {
                Width = 3,
                Color = "#d3d3d3"
            }
        });
        _ = chart.Relayout(CancellationToken.None);
    }
}