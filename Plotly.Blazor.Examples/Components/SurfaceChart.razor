@using Plotly.Blazor.LayoutLib
@using System.Globalization
@using Plotly.Blazor.Interop
@using Plotly.Blazor.Examples.Components.Display
@inject NavigationManager MyNavigationManager

@if (!IsInitialized)
{
    <MudPaper>
        <MudProgressLinear Color="Color.Primary" Indeterminate="true"/>
    </MudPaper>
}

<PlotlyChart style="height: 60vh; min-height: 350px" @bind-Config="config" @bind-Layout="layout" @bind-Data="data" @ref="chart" 
             ClickAction="ClickAction" HoverAction="HoverAction" AfterRender="LoadData" />

<HoverClickDisplay ClickInfos="@ClickInfos" HoverInfos="@HoverInfos"/>

@code
{
    [CascadingParameter]
    private MudTheme Theme { get; set; }

    private PlotlyChart chart;
    private Config config;
    private Layout layout;
    private IList<ITrace> data;

    private IEnumerable<EventDataPoint> ClickInfos { get; set; }
    private IEnumerable<EventDataPoint> HoverInfos { get; set; }

    private bool IsInitialized { get; set; }

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        config = new Config
        {
            ShowLink = false,
            Responsive = true,
            DisplayLogo = false
        };

        layout = new Layout
        {
            Title = new Title
            {
                Text = "Mt Bruno Elevation"
            },
            PaperBgColor = Theme.PaletteDark.Surface.ToString(),
            PlotBgColor = Theme.PaletteDark.Surface.ToString(),
            Font = new Font
            {
                Color = Theme.PaletteDark.TextPrimary.ToString()
            },
            Margin = new Margin
            {
                L = 65,
                R = 50,
                B = 65,
                T = 90
            }
        };

        data = new List<ITrace>();

        base.OnInitialized();
    }

    private void LoadData()
    {
        Task.Run(async () =>
        {
            foreach (var trace in await GetSurfaceData())
            {
                await InvokeAsync(async () => await chart.AddTrace(trace));
                // Add the delay to keep the UI responsive
                await Task.Delay(10);
            }
            IsInitialized = true;
            await chart.SubscribeHoverEvent();
            await chart.SubscribeClickEvent();
            await InvokeAsync(StateHasChanged);
        });
    }

    public void ClickAction(IEnumerable<EventDataPoint> eventData)
    {
        ClickInfos = eventData;
        StateHasChanged();
    }
    
    public void HoverAction(IEnumerable<EventDataPoint> eventData)
    {
        HoverInfos = eventData;
        StateHasChanged();
    }

    async Task<IList<ITrace>> GetSurfaceData()
    {
        IList<ITrace> mapData = new List<ITrace>();

        using var client = new HttpClient
        {
            BaseAddress = new Uri(MyNavigationManager.BaseUri)
        };

        var csv = (await client.GetStringAsync($"{MyNavigationManager.BaseUri}mt_bruno_elevation.csv"))
            .Split("\n")
            .Skip(1)
            .Where(s => !string.IsNullOrWhiteSpace(s))
            .Select(s => s.Split(",").ToList()).ToList();

        var z = new List<decimal[]>();

        foreach (var row in csv)
        {
            var currentValues = new List<decimal>();

            for (var i = 1; i < 25; i++)
            {
                currentValues.Add(decimal.Parse(row[i], NumberStyles.Any, CultureInfo.InvariantCulture));
            }

            z.Add(currentValues.ToArray());
        }

        mapData.Add(new Surface
        {
            Z = z.Cast<object>().ToList()
        });

        return mapData;
    }
}