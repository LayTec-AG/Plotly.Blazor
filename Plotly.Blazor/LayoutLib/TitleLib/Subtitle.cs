/*
 * THIS FILE WAS GENERATED BY PLOTLY.BLAZOR.GENERATOR
*/

using System;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text.Json.Serialization;

namespace Plotly.Blazor.LayoutLib.TitleLib
{
    /// <summary>
    ///     The Subtitle class.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Plotly.Blazor.Generator", null)]
    [Serializable]
    public class Subtitle : IEquatable<Subtitle>
    {
        /// <summary>
        ///     Sets the subtitle font.
        /// </summary>
        [JsonPropertyName(@"font")]
        public Plotly.Blazor.LayoutLib.TitleLib.SubtitleLib.Font Font { get; set;} 

        /// <summary>
        ///     Sets the plot&#39;s subtitle.
        /// </summary>
        [JsonPropertyName(@"text")]
        public string Text { get; set;} 

        /// <inheritdoc />
        public override bool Equals(object obj)
        {
            if (!(obj is Subtitle other)) return false;

            return ReferenceEquals(this, obj) || Equals(other);
        }

        /// <inheritdoc />
        public bool Equals([AllowNull] Subtitle other)
        {
            if (other == null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Font == other.Font ||
                    Font != null &&
                    Font.Equals(other.Font)
                ) && 
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.Equals(other.Text)
                );
        }

        /// <inheritdoc />
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Font != null) hashCode = hashCode * 59 + Font.GetHashCode();
                if (Text != null) hashCode = hashCode * 59 + Text.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     Checks for equality of the left Subtitle and the right Subtitle.
        /// </summary>
        /// <param name="left">Left Subtitle.</param>
        /// <param name="right">Right Subtitle.</param>
        /// <returns>Boolean</returns>
        public static bool operator == (Subtitle left, Subtitle right)
        {
            return Equals(left, right);
        }

        /// <summary>
        ///     Checks for inequality of the left Subtitle and the right Subtitle.
        /// </summary>
        /// <param name="left">Left Subtitle.</param>
        /// <param name="right">Right Subtitle.</param>
        /// <returns>Boolean</returns>
        public static bool operator != (Subtitle left, Subtitle right)
        {
            return !Equals(left, right);
        }

        /// <summary>
        ///     Gets a deep copy of this instance.
        /// </summary>
        /// <returns>Subtitle</returns>
        public Subtitle DeepClone()
        {
            return this.Copy();
        }
    }
}