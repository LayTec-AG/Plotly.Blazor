/*
 * THIS FILE WAS GENERATED BY PLOTLY.BLAZOR.GENERATOR
*/

using System;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text.Json.Serialization;

namespace Plotly.Blazor.Traces.SplomLib
{
    /// <summary>
    ///     The Diagonal class.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Plotly.Blazor.Generator", "4.0.1.0")]
    [Serializable]
    public class Diagonal : IEquatable<Diagonal>
    {
        /// <summary>
        ///     Determines whether or not subplots on the diagonal are displayed.
        /// </summary>
        [JsonPropertyName(@"visible")]
        public bool? Visible { get; set;} 

        /// <inheritdoc />
        public override bool Equals(object obj)
        {
            if (!(obj is Diagonal other)) return false;

            return ReferenceEquals(this, obj) || Equals(other);
        }

        /// <inheritdoc />
        public bool Equals([AllowNull] Diagonal other)
        {
            if (other == null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Visible == other.Visible ||
                    Visible != null &&
                    Visible.Equals(other.Visible)
                );
        }

        /// <inheritdoc />
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Visible != null) hashCode = hashCode * 59 + Visible.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     Checks for equality of the left Diagonal and the right Diagonal.
        /// </summary>
        /// <param name="left">Left Diagonal.</param>
        /// <param name="right">Right Diagonal.</param>
        /// <returns>Boolean</returns>
        public static bool operator == (Diagonal left, Diagonal right)
        {
            return Equals(left, right);
        }

        /// <summary>
        ///     Checks for inequality of the left Diagonal and the right Diagonal.
        /// </summary>
        /// <param name="left">Left Diagonal.</param>
        /// <param name="right">Right Diagonal.</param>
        /// <returns>Boolean</returns>
        public static bool operator != (Diagonal left, Diagonal right)
        {
            return !Equals(left, right);
        }

        /// <summary>
        ///     Gets a deep copy of this instance.
        /// </summary>
        /// <returns>Diagonal</returns>
        public Diagonal DeepClone()
        {
            return this.Copy();
        }
    }
}